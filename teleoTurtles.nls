;;; TeleoReactive Turtles 
;;; Version 0.1, 2016 Ilias Sakellariou (IS)
;;; Version 0.2, 2016 IS
;;; Bersion 0.21 2017/1/13 IS: Ported to NetLogo v6

extensions [table]
globals [tr#code#repo]
__includes [ "./tr/teleoTPercepts.nls" "./tr/teleoTSyntax.nls"]

;;;;;;;;;;;;;;; Test Code
to test
   add-percept "holding"
   add-percept "see-depot"
   show "Rules"
   foreach (item 1 tr#rules) [ [arule] -> show arule show tr#evaluate-cond arule]
   show "Mathcing"
   show tr#matching-rule-actions
end 


;;; 

;;; This is complicated 
;;; If it is a timed sequence, then each action is executed in turn for that time. 
;;; IS: Do we need the check for percept updates? 
;;; 
to execute-rules
   update-percepts
   if tr#perc-change ;; if environment changes, then we have to re-evaluate.
     [;d; let tr#currect-set first tr#matching-rule-actions ;; Get the first rule that matches.
      ;d; let tr#currect-set tr#matching-first-rule-actions ;; works simpler.
      ;d; Add the new actions to the execution structure.
      ;d; tr#add-actions tr#currect-set
      
      ;; Init the stack of rule ids
      let lv#tr#next-ruleids []
      ;; Init the local var
      let lv#tr#next-rule-to-add 0
      ;;; Reset the stack of procedures (possibly an overkill)
      table:put teleor-store "tr#current-procedure-stack" (list last table:get teleor-store "tr#current-procedure-stack") 
      ;;; find the first rule that matches
      
      set lv#tr#next-rule-to-add  tr#matching-first-rule 
      set lv#tr#next-ruleids fput (tr#rule-id lv#tr#next-rule-to-add) lv#tr#next-ruleids
      ;d;show tr#rule-action lv#tr#next-rule-to-add
      while [tr#procedure-call? (tr#rule-action lv#tr#next-rule-to-add)]
          [
            tr#push-procedure (tr#rule-procedure-call lv#tr#next-rule-to-add)   
            set lv#tr#next-rule-to-add  tr#matching-first-rule 
            set lv#tr#next-ruleids fput (tr#rule-id lv#tr#next-rule-to-add) lv#tr#next-ruleids
            ;d;show tr#rule-action lv#tr#next-rule-to-add
           ]
     
      ;;; So if it is the same rule change nothing.
      if (lv#tr#next-ruleids != tr#current-rule-ids)
          [ tr#add-actions tr#rule-action lv#tr#next-rule-to-add
            table:put teleor-store "tr#current-rule-ids" lv#tr#next-ruleids
          ]  
      ]
       ;; [foreach  tr#last-actions [run ?]] ;; run previous actions  
   tr#run-next-action
   ;;; clean up the percept flag
   tr#cleanup-step
end


;;; Main Data Structure
to tr-init 
  set teleor-store table:make
  table:put teleor-store "tr#percepts" table:make
;;  table:put teleor-store "tr#percepts-temp" []
  table:put teleor-store "tr#durative-actions" []
  table:put teleor-store "tr#discrete-actions" [] 
  table:put teleor-store "tr#rules" []
  table:put teleor-store "tr#change" true ;; Initially needs true to work correctly.
  table:put teleor-store "tr#current-action-sequence" []
  tr#reset-action-counter ;; this is = table:put teleor-store "tr#counter" 1
  table:put teleor-store "tr#current-action" 0
  table:put teleor-store "tr#current-pp-action" []
  table:put teleor-store "tr#current-rule-ids" 0 
  table:put teleor-store "tr#length" 0
  table:put teleor-store "tr#procedures" []
  table:put teleor-store "tr#current-procedure-stack" []
  
  show "Inited"
end

;;; Counter Operations

to tr#cleanup-step
   ;; clearing percept update flag
   table:put teleor-store "tr#change" false
end

to tr#run-next-action
  ;; Debug
   ;dbg-tr#action-info
  ;;; run the action(s)
  tr#run-action 
  
  ;Remove ;; If it is not a number it is either a durative action with inf or a discrete action - no check.
  ;Remove ;; is-number? tr#next-action-counter and tr#action-counter >= tr#next-action-counter) ;; Safety in >=
  
  ifelse ( tr#remove-action? )
     [ ;;;  places action from a list to the end.
       table:put teleor-store "tr#current-action-sequence" (lput (tr#updated-action) (but-first tr#current-action-sequence))
       tr#reset-action-counter ;; resets counter for the next action in sequence
     ]
     [tr#inc-action-counter]  ;; else increase the counter. 
end

;;; Reporter stating the conditions that should hold for the counters.
;;; Conditions to remove an action
to-report tr#remove-action?
  if tr#next-action-counter = "inf" [report false]
  if tr#next-action-counter = "seq" [report false]
  ;; remove and reset counter in dis actions. Attention returns true!
  if tr#next-action-counter = "dis" [report true]
  ;; check end condition
  report (tr#action-counter >= tr#next-action-counter)
end

;;; Handle changes to an action
;; Used for repeat (and possibly other in the future)
to-report tr#updated-action 
    report ifelse-value (first tr#next-action-str = "tr#repeat")
         [replace-item 1 tr#next-action-str (item 1 tr#next-action-str - 1) ]     
         [tr#next-action-str]
end


;;if member? "tr#repeat" first (list (word "tr#repeat " 5) "dis") 


;;; Runs a single action or an action sequence.
;;; If it is an action sequence (list), then we could 
;;; have the updated action filtered once (opt) 
to tr#run-action 
    ifelse is-list? tr#next-action
      [foreach (ifelse-value (tr#action-counter = 1) 
                 [tr#next-action] 
                 [filter tr#durative-action? tr#next-action ] )
      
                    run]
      [run tr#next-action]
    
    ;; Run ++ actions 
    foreach tr#current-pp-action run 
      
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; REPORTERS FOR TELEO STRUCTURE
to-report tr#percept-list
  report table:get teleor-store "tr#percepts"
end

to-report tr#durative-actions
  report table:get teleor-store "tr#durative-actions"
end

to-report tr#discrete-actions
  report table:get teleor-store "tr#discrete-actions"
end

to-report tr#procedures
  report table:get teleor-store "tr#procedures"
end

;;; Reports the set of TR Rules
to-report tr#rules
  report first filter [[x] -> first x = tr#current-procedure] table:get teleor-store "tr#rules"
end

;;; Reports the set of rules i
to-report tr#rules-list 
  report item 1 tr#rules
end

to-report tr#perc-change
  report table:get teleor-store "tr#change" 
end

to-report tr#last-actions
  report table:get teleor-store "tr#lastDurativeActions" 
end

to-report tr#current-action-sequence
  report table:get teleor-store "tr#current-action-sequence"
end

to-report tr#current-rule-ids
  report table:get teleor-store "tr#current-rule-ids"
end 

to-report tr#next-action-str
  report first tr#current-action-sequence
end

;;;  Next Action to execute
to-report tr#next-action
  report first tr#next-action-str
end

;;; Next Action Counter
to-report tr#next-action-counter
  report item 1 tr#next-action-str
end

to-report tr#current-pp-action
   report table:get teleor-store "tr#current-pp-action"
end

to-report tr#current-procedure-stack
  report table:get teleor-store "tr#current-procedure-stack"
end

to tr#add-duative-actions [tr#currect-set]
  table:put teleor-store "tr#lastDurativeActions" filter tr#durative-action? tr#currect-set
end

;;; Add the actions of the rule in the current action sequence and make approrpiate 
;;; initialisation operations.
;;; tr#current-action is the first action (index in the sequence)
;;; action counter is reset
to tr#add-actions [tr#action-list]
  table:put teleor-store "tr#current-pp-action" tr#action-list-seq tr#action-list
  table:put teleor-store "tr#current-action-sequence" filter [ [x] -> first x != "++"] tr#action-list
  table:put teleor-store "tr#length" length tr#action-list
  table:put teleor-store "tr#current-action" 0
  tr#reset-action-counter
end

to-report tr#action-list-seq [tr#action-list]
  let tr#local-list filter [ [x] -> first x = "++"] tr#action-list
  report ifelse-value (empty? tr#local-list) [ [] ] [but-first first tr#local-list]
end

;;;;;;;;;;;;;;;;;;;;
;;; Procedures
to tr#push-procedure [tr#Proc]
   table:put teleor-store "tr#current-procedure-stack" (fput tr#Proc table:get teleor-store "tr#current-procedure-stack")
end

;;; Get the top of the stack.
to-report tr#current-procedure
    report first table:get teleor-store "tr#current-procedure-stack"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Action counter operations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; reset action counter
to tr#reset-action-counter
  table:put teleor-store "tr#counter" 1
end

;; report the action counter
to-report tr#action-counter
  report table:get teleor-store "tr#counter"
end

;;; increase action counter
to tr#inc-action-counter
  table:put teleor-store "tr#counter" (tr#action-counter + 1) 
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Gets a list of actions and time declarations and provides a list of 
;;; lists, each item holds an action and a duration.
to-report tr#build-action-sequence [tr#action_list]
  if empty? tr#action_list [report []]
  ;; This one is always an action
  let tr#action first tr#action_list
  ifelse length tr#action_list > 1 and 
         tr#is-action-or-seq? tr#action and 
         tr#for-declaration? (item 1 tr#action_list) 
     [report (fput (list tr#action tr#for-duration (item 1 tr#action_list) ) tr#build-action-sequence (but-first but-first tr#action_list))]
     [report fput (tr#fix-action-struct tr#action) tr#build-action-sequence but-first tr#action_list]           
end

;;; If an action is durative the add inf as a duration
;;; If an action is discrete then add dis as a marker.
to-report tr#fix-action-struct [tr#action]
  ;; Support for the empty action
  if (tr#action = []) [report (list "no-action" "inf")]
  if (first tr#action = "++") [report tr#action]
  if (is-list? tr#action) [report (list tr#action "seq")] 
  if (tr#durative-action? tr#action) [report (list tr#action "inf")]
  if (tr#discrete-action? tr#action) [report (list tr#action "dis")]
  report (list tr#action "call")    
  ;;report (list tr#action ifelse-value tr#durative-action? tr#action ["inf"] ["dis"])  
end

;;; This is not needed now, but possibly later
;;; A check is done.
to-report tr#is-action-or-seq? [tr#action]
  if is-list? tr#action  
     [report reduce and map tr#valid-action? tr#action]
  report tr#valid-action? tr#action
;     ] 
;  ifelse (tr#durative-action? tr#action or tr#discrete-action? tr#action or build-in-action? tr#action)
;     [report true]
;     [error (word "Action * " tr#action " * is not declared as durative or dicrete.")]
end



to-report tr#for-declaration? [tr#for-decl]
  report is-list? tr#for-decl and first tr#for-decl = "for"
end

to-report tr#for-duration [tr#for-decl]
  report item 1 tr#for-decl
end


;;; Recursively assigns an ID to each rule.
;;; Used in the procedure construct
to-report tr#add-id-to-rules [tr#name tr#num tr#RuleList]
     if empty? tr#RuleList [report []]
     report (fput (lput (word tr#name "-" tr#num) (first tr#RuleList) )
              (tr#add-id-to-rules tr#name (tr#num + 1) (but-first tr#RuleList)))
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Rules  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Rules are lists that have reporter tasks (i.e. conditions) and annotated actions
;;; and an id (string)
;;; i.e. lists themselves. 
to-report tr#evaluate-cond [tr#rule]
  report reduce and map run-result filter is-anonymous-reporter? tr#rule    
end

to-report tr#rule-action [tr#rule]
   report first filter is-list? tr#rule
end

;;; Report the id (i.e. string) of the action
to-report tr#rule-id [tr#rule]
   report first filter is-string? tr#rule
end

;;; Reports the procedure the rule is calling.
to-report tr#rule-procedure-call [tr#rule]
  ;show tr#rule
  ;show first (tr#rule-action tr#rule)
  ;show first first (tr#rule-action tr#rule)
  report first first (tr#rule-action tr#rule) 
end

;;; Checks if the rule action is a procedure call.
to-report tr#procedure-call? [tr#rule-action-part]
  report (item 1 (first tr#rule-action-part) = "call")
end

;;; This is an overkill. Just get the first rule. This way we will push the names of the procedures are well.
;;; Obsolete:: Delete next iteration
to-report tr#matching-rule-actions 
  report map tr#rule-action (filter tr#evaluate-cond tr#rules-list)
end

to-report tr#matching-first-rule-actions
  foreach tr#rules-list [ [x] -> if (tr#evaluate-cond x) [report tr#rule-action x]]
end

;;; Reports the first matching rule (complete with conditions and ID)
to-report tr#matching-first-rule
  foreach tr#rules-list [ [x] -> if (tr#evaluate-cond x) [report x]]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Special Build-in Actions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Nothing to do.
to no-action
  
end

;;; Wait does nothing.
to tr#wait  
  ;; do nothing 
end



;;; An action that changes the internal state. CAREFULL
to tr#repeat [N]
  if N = 0 [user-message (word "Action " but-first tr#current-action-sequence  " Failed due to repeat.")] ;; do nothing
  table:put teleor-store "tr#current-action-sequence" 
     (fput (list (word "tr#repeat " (N - 1)) "dis") 
         (but-first tr#current-action-sequence))
end

;;; Is it a valid action? 
to-report tr#valid-action? [tr#action]
   ifelse tr#discrete-action? tr#action 
        or tr#durative-action? tr#action
        or build-in-action? tr#action
     [report true]   
     [error (word "Action * " tr#action " * is not declared as durative or dicrete.")]    
end


;;; Reports true if the argument is a discrete action
to-report tr#discrete-action? [tr#action]
  report member? tr#action tr#discrete-actions
end


;;; Reports true if the argument is a durative action
to-report tr#durative-action? [tr#action]
  report member? tr#action tr#durative-actions
end

;;; Used for checks. These are internal actions (Wait repeat) and "no-action"
to-report  build-in-action? [tr#action]
  report member? tr#action ["no-action" "tr#wait" "tr#repeat" [] ]
         or member? "tr#repeat" tr#action
end

;; Used for checks. 
to-report tr#procedure?  [tr#procedure]
     report member? tr#procedure tr#procedures
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Debugging
to dbg-tr#percepts-print
  foreach table:to-list tr#percept-list
     show 
end

to dbg-tr#rules
  foreach table:get teleor-store "tr#rules" 
    [[x]-> 
     print first x  
     foreach item 1 x print
    ]
end

to dbg-tr#action-info
   show (word "Actions:" tr#current-action-sequence " Counter:" tr#action-counter " Percept Change:" tr#perc-change)
  show (word "Next Action Structure:" tr#next-action-str)
  show (word "Next Action to run:" tr#next-action)
  show (word "Next Action Update:" tr#updated-action) 
  show (word "++Actions:" tr#current-pp-action) 
  show (word "Procedure Stack: " tr#current-procedure-stack)
end


